---
apiVersion: v1
kind: Service
metadata:
  labels:
    env: ${OS_ENVIRONMENT}
    name: ${ROUTER_INSTANCE}
  name: ${ROUTER_INSTANCE}-svc
  namespace: ${OS_PROJECT}
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 10500
  selector:
    name: ${ROUTER_INSTANCE}
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    env: ${OS_ENVIRONMENT}
    name: ${ROUTER_INSTANCE}
  name: ${ROUTER_INSTANCE}
  namespace: ${OS_PROJECT}
spec:
  replicas: ${REPLICAS}
  selector:
    matchLabels:
      name: ${ROUTER_INSTANCE}
  template:
    metadata:
      labels:
        name: ${ROUTER_INSTANCE}
        mapid: "${MAPID}"
    spec:
      containers:
        - image: 'docker-registry/${OS_IMAGE_REGION}-${OS_SHARED_PROJECT}/myimage:${ROUTER_VERSION}'
          name: ${ROUTER_INSTANCE}
          volumeMounts:
            - mountPath: /config
              name: ${ROUTER_INSTANCE}-config
              readOnly: true
      volumes:
      - name: ${ROUTER_INSTANCE}-config
        secret:
          defaultMode: 440
          secretName: ${ROUTER_INSTANCE}-config-secret
---
apiVersion: v1
kind: Route
metadata:
  annotations:
    openshift.io/host.generated: 'true'
    haproxy.router.openshift.io/balance: leastconn
    haproxy.router.openshift.io/disable_cookies: 'true'   
  labels:
    env: ${OS_ENVIRONMENT}
    name: ${ROUTER_INSTANCE}
  name: ${ROUTER_INSTANCE}-route-internet
  namespace: ${OS_PROJECT}
spec:
  host: ${HOST_DNS}
  tls:
    termination: passthrough
  to:
    kind: Service
    name: ${ROUTER_INSTANCE}-svc
    weight: 100
  wildcardPolicy: None
